syncQ changes from snc1.9b3 (12-Aug-96)
---------------------------------------

Index: Version
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/Version,v
retrieving revision 1.1.1.2
diff -r1.1.1.2 Version
1c1
< 1.9 Beta3 (for EPICS R3.12.0)
---
> 1.9 Beta3 + syncQ (for EPICS R3.12.0)

Index: gen_ss_code.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/gen_ss_code.c,v
retrieving revision 1.4
diff -r1.4 gen_ss_code.c
12a13
> 09aug96,wfl	Supported pvGetQ().
109c110
< 	fprintf("stderr, "eval_delay: type=%s\n", stype[ep->type]);
---
> 	fprintf(stderr, "eval_delay: type=%s\n", stype[ep->type]);
413c414
< 		F_PVGET, F_PVPUT, F_PVTIMESTAMP, F_PVASSIGN,
---
> 		F_PVGET, F_PVGETQ, F_PVPUT, F_PVTIMESTAMP, F_PVASSIGN,
422c423
< 		"pvGet", "pvPut", "pvTimeStamp", "pvAssign",
---
> 		"pvGet", "pvGetQ", "pvPut", "pvTimeStamp", "pvAssign",
488a490
> 	    case F_PVGETQ:

Index: gen_tables.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/gen_tables.c,v
retrieving revision 1.3
diff -r1.3 gen_tables.c
17a18
> 08aug96,wfl	Added emission of code for syncQ queues.
176c177,183
< 	printf("%d", mon_flag);
---
> 	printf("%d, ", mon_flag);
> 
> 	/* syncQ queue */
> 	if (!vp->queued)
> 	    printf("0, 0, 0");
> 	else
> 	    printf("%d, %d, %d", vp->queued, vp->maxQueueSize, vp->queueIndex);
320a328,329
> 	printf("\t/* numQueues */          NUM_QUEUES,\n");	/* number of syncQ queues */
> 
443a453
> 	cp = vp->chan;
455a466,479
> 	/* value queued via syncQ? (pvgetQ() call; if array, all elements
> 	   are assumed to refer to the same event flag) */
> 	if (cp != NULL && vp->queued)
> 	{
> 		int ef_num = cp->num_elem == 0 ?
> 					cp->ef_num : cp->ef_num_list[0];
> #ifdef	DEBUG
> 		fprintf(stderr, " eval_event_mask: %s, ef_num=%d\n",
> 		 vp->name, ef_num);
> #endif
> 		bitSet(pEventWords, ef_num);
> 		return;
> 	}
> 
457d480
< 	cp = vp->chan;

Index: parse.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/parse.c,v
retrieving revision 1.1.1.2
diff -r1.1.1.2 parse.c
21a22
> 08aug96,wfl	Added new syncq_stmt() routine.
543c544,639
< 	
---
> 
> /* Parsing "syncq" statement */
> syncq_stmt(name, subscript, ef_name, maxQueueSize)
> char		*name;
> char		*subscript;
> char		*ef_name;
> char		*maxQueueSize;
> {
> 	Chan		*cp;
> 	Var		*vp;
> 	Var		*efp;
> 	extern int	line_num;
> 	int		subNum;
> 
> #ifdef	DEBUG
> 	fprintf(stderr, "syncq_stmt: name=%s, subNum=%s, ef_name=%s, "
> 	    "maxQueueSize=%s\n", name, subscript, ef_name, maxQueueSize);
> #endif	DEBUG
> 
> 	/* Find the variable and check it's assigned */
> 	vp = (Var *)findVar(name);
> 	if (vp == 0)
> 	{
> 		fprintf(stderr, "syncQ: variable %s not declared, line %d\n",
> 		 name, line_num);
> 		return;
> 	}
> 
> 	cp = vp->chan;
> 	if (cp == 0)
> 	{
> 		fprintf(stderr, "syncQ: variable %s not assigned, line %d\n",
> 		 name, line_num);
> 		return;
> 	}
> 
> 	/* Check that the variable has not already been syncQ'd */
> 	if (vp->queued)
> 	{
> 		fprintf(stderr, "syncQ: variable %s already syncQ'd, "
> 		 "line %d\n", name, line_num);
> 		return;
> 	}
> 
> 	/* Find the event flag variable */
> 	efp = (Var *)findVar(ef_name);
> 	if (efp == 0 || efp->type != V_EVFLAG)
> 	{
> 		fprintf(stderr, "syncQ: e-f variable %s not declared, "
> 		 "line %d\n", ef_name, line_num);
> 		return;
> 	}
> 
> 	/* Check that the event flag has not already been syncQ'd */
> 	if (efp->queued)
> 	{
> 		fprintf(stderr, "syncQ: e-f variable %s already syncQ'd, "
> 		 "line %d\n", ef_name, line_num);
> 		return;
> 	}
> 
> 	/* Note queued (for both variable and event flag) and set the
> 	   maximum queue size (0 means default) */
> 	vp->queued = efp->queued = TRUE;
> 	vp->maxQueueSize = (maxQueueSize == NULL) ? 0 : atoi(maxQueueSize);
> 
> 	if (subscript == NULL)
> 	{	/* no subscript */
> 		if (cp->db_name != NULL)
> 		{	/* 1 pv assigned to this variable */
> 			cp->ef_var = efp;
> 			return;
> 		}
> 
> 		/* 1 pv per element in the array */
> 		for (subNum = 0; subNum < cp->num_elem; subNum++)
> 		{
> 			cp->ef_var_list[subNum] = efp;
> 		}
> 		return;
> 	}
> 
> 	/* subscript != NULL */
> 	subNum = atoi(subscript);
> 	if (subNum < 0 || subNum >= cp->num_elem)
> 	{
> 		fprintf(stderr,
> 		 "syncQ: subscript %s[%d] out of range, line %d\n",
> 		 name, subNum, line_num);
> 		return;
> 	}
> 	cp->ef_var_list[subNum] = efp; /* sync to a specific element of the array */
> 
> 	return;
> }
> 

Index: parse.h
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/parse.h,v
retrieving revision 1.1.1.2
diff -r1.1.1.2 parse.h
15a16
> 08aug96,wfl	Added syncQ variables to var struct.
46a48,50
> 	int	queued;			/* whether queued via syncQ */
> 	int	maxQueueSize;		/* max syncQ queue size */
> 	int	queueIndex;		/* index in syncQ queue array */
95c99
< #define	VC_SIMPLE	0		/* simple (un-dimentioned) variable */
---
> #define	VC_SIMPLE	0		/* simple (un-dimensioned) variable */

Index: phase2.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/phase2.c,v
retrieving revision 1.3
diff -r1.3 phase2.c
18a19
> 11aug96,wfl	Supported syncQ queues.
28a30
> int	num_queues = 0;		/* number of syncQ queues */
53c55
< 	/* Count number of db channels and state sets defined */
---
> 	/* Count number of db channels, queues and state sets defined */
54a57
> 	num_queues = db_queue_count();
105a109
> 	printf("#define NUM_QUEUES %d\n", num_queues);
382a387,409
> }
> 
> 
> /* Sets vp->queueIndex for each syncQ'd variable, & returns number of
>  * syncQ queues defined. 
>  */
> db_queue_count()
> {
> 	extern	Var	*var_list;
> 	int		nqueue;
> 	Var		*vp;
> 
> 	nqueue = 0;
> 	for (vp = var_list; vp != NULL; vp = vp->next)
> 	{
> 		if (vp->type != V_EVFLAG && vp->queued)
> 		{
> 			vp->queueIndex = nqueue;
> 			nqueue++;
> 		}
> 	}
> 
> 	return nqueue;

Index: seq.h
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/seq.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 seq.h
45a46
>    09aug96,wfl	Added syncQ queue support.
56a58
> #include	"ellLib.h"
75d76
< 	int		efId;		/* event flag id if synced */
76a78
> 	int		efId;		/* event flag id if synced */
77a80,83
> 	int		queued;		/* TRUE if queued via syncQ */
> #define MAX_QUEUE_SIZE 100		/* default max_queue_size */
> 	int		maxQueueSize;	/* max syncQ queue size (0 => def) */
> 	int		queueIndex;	/* syncQ queue index */
100a107,115
> /* Structure for syncQ queue entry */
> struct	queue_entry
> {
> 	ELLNODE		node;		/* linked list node */
> 	CHAN		*pDB;		/* ptr to db channel info */
> 	union db_access_val value;	/* value, time stamp etc */
> };
> typedef struct queue_entry QENTRY;
> 
168a184,185
> 	int		numQueues;	/* number of syncQ queues */
> 	ELLLIST		*pQueues;	/* ptr to syncQ queues */

Index: seq_ca.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/seq_ca.c,v
retrieving revision 1.4
diff -r1.4 seq_ca.c
45a46
>  * 09aug96,wfl	Added support for syncQ queued values.
51a53
> LOCAL VOID proc_db_events_queued(union db_access_val *, CHAN *);
158a161,167
> 	/* If monitor on var queued via syncQ, branch to alternative routine */
> 	if (pDB->queued && complete_type == MON_COMPLETE)
> 	{
> 	    proc_db_events_queued(pAccess, pDB);
> 	    return;
> 	}
> 
192a202,260
> /* Common code for event and callback handling (queuing version) */
> LOCAL VOID proc_db_events_queued(pAccess, pDB)
> union db_access_val	*pAccess;
> CHAN			*pDB;
> {
> 	QENTRY			*pEntry;
> 	SPROG			*pSP;
> 	int			count;
> 
> 	/* Get ptr to the state program that owns this db entry */
> 	pSP = pDB->sprog;
> 
> 	/* Determine number of items currently on the queue */
> 	count = ellCount(&pSP->pQueues[pDB->queueIndex]);
> 
> #ifdef	DEBUG
> 	logMsg("proc_db_events_queued: var=%s, pv=%s, count(max)=%d(%d), "
> 	       "index=%d\n", pDB->pVarName, pDB->dbName, count,
> 	       pDB->maxQueueSize, pDB->queueIndex);
> #endif	DEBUG
> 
> 	/* Allocate queue entry (re-use last one if queue has reached its
> 	   maximum size) */
> 	if ( count < pDB->maxQueueSize )
> 	{
> 		pEntry = (QENTRY *) calloc(sizeof(QENTRY), 1);
> 		if (pEntry == NULL)
> 		{
> 			logMsg("proc_db_events_queued: %s queue memory "
> 			       "allocation failure\n", pDB->pVarName);
> 			return;
> 		}
> 		ellAdd(&pSP->pQueues[pDB->queueIndex], (ELLNODE *) pEntry);
> 	}
> 	else
> 	{
> 		pEntry = (QENTRY *) ellLast(&pSP->pQueues[pDB->queueIndex]);
> 		if (pEntry == NULL)
> 		{
> 			logMsg("proc_db_events_queued: %s queue inconsistent "
> 			       "failure\n", pDB->pVarName);
> 			return;
> 		}
> 	}
> 
> 	/* Copy channel id, value and associated information into queue
> 	   entry (NB, currently only copy _first_ value for arrays) */
> 	pEntry->pDB = pDB;
> 	bcopy(pAccess, &pEntry->value, sizeof(pEntry->value));
> 
> 	/* Set the event flag associated with this channel */
> #ifdef DEBUG
> 	logMsg("setting event flag %d\n", pDB->efId);
> #endif	DEBUG
> 	seq_efSet((SS_ID)pSP->pSS, pDB->efId);
> 
> 	return;
> }
> 
309a378,381
> #ifdef	DEBUG
> 	logMsg("waking up states waiting on event %d\n", eventNum);
> #endif	DEBUG
> 
312a385,387
> #ifdef	DEBUG
> 	logMsg("ss #%d, mask=0x%x\n", nss, pSS->pMask[0]);
> #endif	DEBUG
315a391,393
> #ifdef	DEBUG
> 	logMsg("woken...\n");
> #endif	DEBUG

Index: seq_if.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/seq_if.c,v
retrieving revision 1.3
diff -r1.3 seq_if.c
33a34
>  * 09aug96,wfl	Added seq_pvGetQ() to support syncQ.
44a46
> 	seq_pvGetQ()
264c266,267
< 	printf("monitor \"%s\"\n", pDB->dbName);
---
> 	printf("monitor \"%s\" (monitored=%d, assigned=%d)\n", pDB->dbName,
> 		pDB->monitored, pDB->assigned);
267c270,274
< 	if (pDB->monitored || !pDB->assigned)
---
> /*	if (pDB->monitored || !pDB->assigned)	*/
> /*	WFL, 96/08/07, don't check monitored because it can get set TRUE */
> /*	in the connection handler before this routine is executed; this */
> /*	fix pending a proper fix */
> 	if (!pDB->assigned)
280a288,291
> #ifdef	DEBUG
> 	printf("monitor \"%s\" (2)\n", pDB->dbName);
> #endif	DEBUG
> 
565a577,653
> /*
>  * seq_pvGetQ() - Get queued DB value (looks like pvGet() but really more
>  *		  like efTestAndClear()).
>  */
> int seq_pvGetQ(ssId, pvId)
> SS_ID		ssId;
> int		pvId;
> {
> 	SPROG		*pSP;
> 	SSCB		*pSS;
> 	CHAN		*pDB;
> 	int		ev_flag;
> 	int		isSet;
> 
> 	pSS = (SSCB *)ssId;
> 	pSP = pSS->sprog;
> 	pDB = pSP->pChan + pvId;
> 
> 	/* Determine event flag number and whether set */
> 	ev_flag = pDB->efId;
> 	isSet = bitTest(pSP->pEvents, ev_flag);
> 
> #ifdef	DEBUG
> 	logMsg("seq_pvGetQ: pv name=%s, isSet=%d\n", pDB->dbName, isSet);
> #endif	DEBUG
> 
> 	/* If set, queue should be non empty */
> 	if (isSet)
> 	{
> 		QENTRY			*pEntry;
> 		union db_access_val	*pAccess;
> 		void			*pVal;
> 
> 		/* Dequeue first entry */
> 		pEntry = (QENTRY *) ellGet(&pSP->pQueues[pDB->queueIndex]);
> 
> 		/* If none, "impossible" */
> 		if (pEntry == NULL)
> 		{
> 			logMsg("seq_pvGetQ: evflag set but queue empty "
> 			       "(impossible)\n");
> 			isSet = FALSE;
> 		}
> 
> 		/* Extract information from entry (code from seq_ca.c)
> 		   (pDB changed to refer to channel for which monitor
> 		   was posted) */
> 		else
> 		{
> 			pDB = pEntry->pDB;
> 			pAccess = &pEntry->value;
> 	
> 			/* Copy value returned into user variable */
> 			/* For now, can only return _one_ array element */
> 			pVal = (void *)pAccess + pDB->dbOffset;
> 			bcopy(pVal, pDB->pVar, pDB->size * 1 );
> 							/* was pDB->dbCount */
> 	 
> 			/* Copy status & severity */
> 			pDB->status = pAccess->tchrval.status;
> 			pDB->severity = pAccess->tchrval.severity;
> 		 
> 			/* Copy time stamp */
> 			pDB->timeStamp = pAccess->tchrval.stamp;
> 		}
> 	}
> 
> 	/* If queue is now empty, clear the event flag */
> 	if (ellCount(&pSP->pQueues[pDB->queueIndex]) == 0)
> 	{
> 		bitClear(pSP->pEvents, ev_flag);
> 	}
> 
> 	/* return TRUE iff event flag was set on entry */
> 	return isSet;
> }
> 

Index: seq_main.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/seq_main.c,v
retrieving revision 1.4
diff -r1.4 seq_main.c
50a51
> 09aug96,wfl	Added initialization of syncQ queues.
286a288,298
> 	/* Allocate and initialize syncQ queues */
> 	pSP->numQueues = pSeqProg->numQueues;
> 	pSP->pQueues = NULL;
> 	if (pSP->numQueues > 0 )
> 	{
> 		pSP->pQueues = (ELLLIST *)calloc(pSP->numQueues,
> 						 sizeof(ELLLIST));
> 		for (i = 0; i < pSP->numQueues; i++)
> 			ellInit(&pSP->pQueues[i]);
> 	}
> 
399a412
> 		pDB->eventNum = pSeqChan->eventNum;
402c415,418
< 		pDB->eventNum = pSeqChan->eventNum;
---
> 		pDB->queued = pSeqChan->queued;
> 		pDB->maxQueueSize = pSeqChan->maxQueueSize ?
> 				    pSeqChan->maxQueueSize : MAX_QUEUE_SIZE;
> 		pDB->queueIndex = pSeqChan->queueIndex;

Index: seq_qry.c
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/seq_qry.c,v
retrieving revision 1.2
diff -r1.2 seq_qry.c
24a25
> 12aug96,wfl	Add syncQ queue reporting.
32a34
> int	seqQueueShow(int);
69a72,75
> 	printf("  number of syncQ queues=%d\n", pSP->numQueues);
> 	if (pSP->numQueues > 0)
> 		printf("  queue array address=%d=0x%x\n",
> 		  pSP->pQueues, pSP->pQueues);
133d138
< 	float		time;
215,216c220,221
< 		printf("  Status=%d\n", pDB->status);
< 		printf("  Severity=%d\n", pDB->severity);
---
> 		printf("  Status = %d\n", pDB->status);
> 		printf("  Severity = %d\n", pDB->severity);
229a235,304
> 	}
> 
> 	return 0;
> }
> 
> /*
>  * seqQueueShow() - Show syncQ queue information for a state program.
>  */
> int seqQueueShow(tid)
> int		tid;	/* task id or name */
> {
> 	SPROG		*pSP;
> 	ELLLIST		*pQueue;
> 	int		nque, n;
> 	char		tsBfr[50];
> 
> 	/* convert (possible) name to task id */
> 	if (tid != 0)
> 	{
> 		tid = taskIdFigure(tid);
> 		if (tid == ERROR)
> 			return 0;
> 	}
> 	pSP = seqQryFind(tid);
> 	if (tid == NULL)
> 		return 0;
> 
> 	printf("State Program: \"%s\"\n", pSP->pProgName);
> 	printf("Number of queues = %d\n", pSP->numQueues);
> 
> 	pQueue = pSP->pQueues;
> 	for (nque = 0; nque < pSP->numQueues; )
> 	{
> 		QENTRY	*pEntry;
> 		int i;
> 
> 		printf("\nQueue #%d of %d:\n", nque+1, pSP->numQueues);
> 		printf("Number of entries = %d\n", ellCount(pQueue));
> 		for (pEntry = (QENTRY *) ellFirst(pQueue), i = 1;
> 		     pEntry != NULL;
> 		     pEntry = (QENTRY *) ellNext(pEntry), i++)
> 		{
> 			CHAN			*pDB = pEntry->pDB;
> 			union db_access_val	*pAccess = &pEntry->value;
> 			void			*pVal =
> 						(void *)pAccess + pDB->dbOffset;
> 
> 			printf("\nEntry #%d: channel name: \"%s\"\n",
> 							    i, pDB->dbName);
> 			printf("  Variable name: \"%s\"\n", pDB->pVarName);
> 			printValue(pVal, pDB->putType, 1);
> 							/* was pDB->count */
> 			printf("  Status = %d\n", pAccess->tchrval.status);
> 			printf("  Severity = %d\n", pAccess->tchrval.severity);
> 
> 			/* Print time stamp in text format:
> 			   "mm/dd/yy hh:mm:ss.nano-sec" */
> 			tsStampToText(&pAccess->tchrval.stamp,
> 							TS_TEXT_MMDDYY, tsBfr);
> 			if (tsBfr[2] == '/') /* valid t-s? */
> 				printf("  Time stamp = %s\n", tsBfr);
> 		}
> 
> 		n = wait_rtn();
> 		if (n == 0)
> 			return 0;
> 		nque += n;
> 		if (nque < 0)
> 			nque = 0;
> 		pQueue = pSP->pQueues + nque;

Index: snc.y
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/snc.y,v
retrieving revision 1.2
diff -r1.2 snc.y
15a16
> 08aug96,wfl	Added new "syncQ" statement.
67c68
< %token	EVFLAG SYNC
---
> %token	EVFLAG SYNC SYNCQ
118a120
> |	syncq_stmt
195a198,207
> ;
> 
> syncq_stmt	/* syncQ <variable> <event flag> [<max queue size>] */
> :	SYNCQ NAME NAME SEMI_COLON	{ syncq_stmt($2, NULL, $3, NULL); }
> |	SYNCQ NAME subscript NAME SEMI_COLON
> 					{ syncq_stmt($2, $3,   $4, NULL); }
> |	SYNCQ NAME NAME NUMBER SEMI_COLON
> 					{ syncq_stmt($2, NULL, $3, $4);   }
> |	SYNCQ NAME subscript NAME NUMBER SEMI_COLON
> 					{ syncq_stmt($2, $3,   $4, $5);   }

Index: snc_lex.l
===================================================================
RCS file: /usr/local/kcvsroot/kss/dcs2/tcs/src/seq/snc_lex.l,v
retrieving revision 1.2
diff -r1.2 snc_lex.l
23a24
> 08aug96,wfl	Added SYNCQ token.
159a161
> <SNL>"syncQ"	RETURN(SYNCQ);

Index: seqCom.h (not cvs diff because not in src/seq)
===================================================================
22d21
<  *
25c24
<  * 08aug96,wfl	Changed magic number; added syncQ queue support.
---
>  * 
30c29
< #define	MAGIC	960811		/* current magic number for SPROG */
---
> #define	MAGIC	940501		/* current magic number for SPROG */
78,80d76
< 	int		queued;		/* TRUE if queued via syncQ */
< 	int		maxQueueSize;	/* max syncQ queue size (0 => def) */
< 	int		queueIndex;	/* syncQ queue index */
116d111
< 	int		numQueues;	/* number of syncQ queues */
134d128
< int	seq_pvGetQ(SS_ID, int);		/* get queued pv value */
