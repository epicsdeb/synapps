------------------------------------------------------------------------
Differences between Keck local seq (operational) and anl/modules/soft/seq v1.9.4
(15-Oct-99; the day on which seq v1.9.4 was closed off)
(changes should be primarily Greg White's)
(William Lupton, wlupton@keck.hawaii.edu)

------------------------------------------------------------------------
diff -r seq/Version /home/wlupton/epics/anl/modules/soft/seq/src/Version
1c1
< 1.9.3.p2
---
> 1.9.4

------------------------------------------------------------------------
diff -r seq/gen_ss_code.c /home/wlupton/epics/anl/modules/soft/seq/src/gen_ss_code.c
16a17,18
> 29apr99,wfl     Avoided compilation warnings.
> 22sep99,grw	Supported entry and exit actions
19c21,22
< #include	"parse.h"
---
> #include	<string.h>
> 
21a25,26
> 
> #include	"parse.h"
22a28
> #include	"proto.h"
33a40,42
> int		state_block_index_from_name();
> int		special_func();
> 
68a78,80
> 			/* Generate entry and exit functions */
>                         gen_change_func(sp, ssp);
> 
82a95,193
> /* Generate functions for each state which perform the state entry and 
>   * exit actions. 
>   */
> gen_change_func(sp, ssp)
> Expr		*ssp;
> Expr		*sp;
> {
>         Expr		*ep;
> 	int isEntry = FALSE, isExit = FALSE;
> 
> 	/* Don't write code for an entry or exit function unless there
> 	   was at least one entry or exit statement */
> 
> 	for ( ep = sp->left; ep != NULL; ep = ep->next )
> 	{
> 		if ( ep->type == E_ENTRY )
> 		       isEntry = TRUE;
> 		else if ( ep->type == E_EXIT )
> 		       isExit = TRUE;
> 	}
> 	if (isEntry) gen_entry_func( sp, ssp );
> 	if (isExit) gen_exit_func( sp, ssp );
> }
> 
> gen_entry_func( sp, ssp )
> Expr		*sp;
> Expr		*ssp;			/* Parent state set */
> {	
>         Expr	*ep,			/* Entry expression */
> 		*xp;			/* statement expression walker */
> 	int	entryI =  0, line_num = -1;
> 
> 	/* Entry function declaration */
> 	printf("\n/* Entry function for state \"%s\" in state set \"%s\" */\n",
>  		sp->value, ssp->value);
> 	printf("static void I_%s_%s(ssId, pVar)\n",
> 		ssp->value, sp->value);
> 	printf("SS_ID\tssId;\n");
> 	printf("struct UserVar\t*pVar;\n{");
> 
> 	for ( ep = sp->left; ep != NULL; ep = ep->next )
> 	{
> 		if ( ep->type == E_ENTRY )
> 		{
> 			printf("/* Entry %d: */\n", ++entryI);
> 			for (xp = ep->right; xp != NULL; xp = xp->next)
> 		        {
> 		                 if (line_num != xp->line_num) 
>                                  { 
>                                          print_line_num(xp->line_num, xp->src_file); 
>                                          line_num = xp->line_num; 
>                                  } 
> 				 eval_expr(ACTION_STMT, xp, sp, 1);
> 			}
> 		}
> 	}
> 
> 	/* end of function */
> 	printf("}\n");
> 	return;
> }
> 
> gen_exit_func( sp, ssp )
> Expr		*sp;
> Expr		*ssp;			/* Parent state set */
> {	
>         Expr	*ep,			/* Entry expression */
> 		*xp;			/* statement expression walker */
> 	int	exitI =  0, line_num = -1;
> 
> 	/* Exit function declaration */
> 	printf("\n/* Exit function for state \"%s\" in state set \"%s\" */\n",
>  		sp->value, ssp->value);
> 	printf("static void O_%s_%s(ssId, pVar)\n",
> 		ssp->value, sp->value);
> 	printf("SS_ID\tssId;\n");
> 	printf("struct UserVar\t*pVar;\n{");
> 
> 	for ( ep = sp->left; ep != NULL; ep = ep->next )
> 	{
> 		if ( ep->type == E_EXIT )
> 		{
>  			 printf("/* Exit %d: */\n", ++exitI);
> 			 for (xp = ep->right; xp != NULL; xp = xp->next)
> 			 {
> 		                 if (line_num != xp->line_num) 
>                                  { 
>                                          print_line_num(xp->line_num, xp->src_file); 
>                                          line_num = xp->line_num; 
>                                  } 
> 				 eval_expr(ACTION_STMT, xp, sp, 1);
> 			 }
> 		}
> 	}
> 	/* end of function */
> 	printf("}\n");
> 	return;
> }
> 
104,105c215,219
< 		print_line_num(tp->line_num, tp->src_file);
< 		traverseExprTree(tp, E_FUNC, "delay", eval_delay, sp);
---
>        		if ( tp->type == E_WHEN )
> 		{
> 		        print_line_num(tp->line_num, tp->src_file);
> 		        traverseExprTree(tp, E_FUNC, "delay", eval_delay, sp);
> 		}
169,172c283
< 		/* "case" for each transition */
< 		printf("\tcase %d:\n", trans_num);
< 		/* For each action statement insert action code */
< 		for (ap = tp->right; ap != NULL; ap = ap->next)
---
> 	        if (tp->type == E_WHEN) 
174,180c285,300
< 			if (line_num != ap->line_num)
< 			{
< 				print_line_num(ap->line_num, ap->src_file);
< 				line_num = ap->line_num;
< 			}
< 			/* Evaluate statements */
< 			eval_expr(ACTION_STMT, ap, sp, 2);
---
> 		         /* "case" for each transition */ 
> 		         printf("\tcase %d:\n", trans_num); 
> 		         /* For each action statement insert action code */
> 		         for (ap = tp->right; ap != NULL; ap = ap->next) 
>                          { 
> 		                 if (line_num != ap->line_num) 
>                                  { 
>                                          print_line_num(ap->line_num, ap->src_file); 
>                                          line_num = ap->line_num; 
>                                  } 
>                                  /* Evaluate statements */ 
>                                  eval_expr(ACTION_STMT, ap, sp, 2); 
> 			 } 
>                          /* end of case */ 
>                          printf("\t\treturn;\n"); 
>                          trans_num++;
182,184d301
< 		/* end of case */
< 		printf("\t\treturn;\n");
< 		trans_num++;
212,233c329,353
< 		print_line_num(tp->line_num, tp->src_file);
< 		printf("\tif (");
< 		if (tp->left == 0)
< 			printf("TRUE");
< 		else
< 			eval_expr(EVENT_STMT, tp->left, sp, 0);
< 		printf(")\n\t{\n");
< 		/* index is the transition number (0, 1, ...) */
< 		index = state_block_index_from_name(ssp, tp->value);
< 		if (index < 0)
< 		{
< 			fprintf(stderr, "Line %d: ", tp->line_num);
< 			fprintf(stderr, "No state %s in state set %s\n",
< 			 tp->value, ssp->value);
< 			index = 0; /* default to 1-st state */
< 			printf("\t\t/* state %s does not exist */\n",
< 			 tp->value);
< 		}
< 		printf("\t\t*pNextState = %d;\n", index);
< 		printf("\t\t*pTransNum = %d;\n", trans_num);
< 		printf("\t\treturn TRUE;\n\t}\n");
< 		trans_num++;
---
> 	        if (tp->type == E_WHEN) 
> 		{
> 		        print_line_num(tp->line_num, tp->src_file);
> 			printf("\tif (");
> 			if (tp->left == 0)
> 			      printf("TRUE");
> 			else
> 			      eval_expr(EVENT_STMT, tp->left, sp, 0);
> 			printf(")\n\t{\n");
> 			/* index is the transition number (0, 1, ...) */
> 			index = state_block_index_from_name(ssp, tp->value);
> 			if (index < 0)
> 			{
> 			       fprintf(stderr, "Line %d: ", tp->line_num);
> 			       fprintf(stderr, "No state %s in state set %s\n",
> 				       tp->value, ssp->value);
> 			       index = 0; /* default to 1-st state */
> 			       printf("\t\t/* state %s does not exist */\n",
> 				      tp->value);
> 			}
> 			printf("\t\t*pNextState = %d;\n", index);
> 			printf("\t\t*pTransNum = %d;\n", trans_num);
> 			printf("\t\treturn TRUE;\n\t}\n");
> 			trans_num++;
> 		}
338a459
> 		fprintf(stderr, "ep->left is %s\n",ep->left ? "non-null" : "null");
701c822
< 		eval_expr(EXIT_STMT, ep, 0, 1);
---
> 		eval_expr(EXIT_STMT, ep, (Expr *)NULL, 1);

------------------------------------------------------------------------
diff -r seq/gen_tables.c /home/wlupton/epics/anl/modules/soft/seq/src/gen_tables.c
20a21,23
> 29apr99,wfl	Avoided compilation warnings.
> 22sep99,grw     Supported entry and exit actions; supported state options;
> 		avoided warnings when no variables are mapped to channels.
25c28,30
< #include	"parse.h"
---
> #include	<stdlib.h>
> #include	<string.h>
> 
26a32
> 
27a34,35
> #include	"parse.h"
> #include	"proto.h"
40a49,50
> int		find_error_state();
> 
86,87d95
< 	printf("\n/* Database Blocks */\n");
< 	printf("static struct seqChan seqChan[NUM_CHANNELS] = {\n");
90c98
< 	for (cp = chan_list; cp != NULL; cp = cp->next)
---
> 	if ( chan_list ) 
91a100,103
> 	        printf("\n/* Database Blocks */\n");
> 	        printf("static struct seqChan seqChan[NUM_CHANNELS] = {\n");
> 		for (cp = chan_list; cp != NULL; cp = cp->next)
> 		{
93,94c105,106
< 		fprintf(stderr, "gen_db_blocks: index=%d, num_elem=%d\n",
< 			cp->index, cp->num_elem);
---
> 		        fprintf(stderr, "gen_db_blocks: index=%d, num_elem=%d\n",
> 			        cp->index, cp->num_elem);
97,106c109,111
< 		if (cp->num_elem == 0)
< 		{	/* Variable assigned to single pv */
< 			fill_db_block(cp, 0);
< 			nchan++;
< 		}
< 		else
< 		{	/* Variable assigned to multiple pv's */
< 			for (elem_num = 0; elem_num < cp->num_elem; elem_num++)
< 			{
< 				fill_db_block(cp, elem_num);
---
> 			if (cp->num_elem == 0)
> 			{	/* Variable assigned to single pv */
> 			        fill_db_block(cp, 0);
108a114,121
> 			else
> 			{	/* Variable assigned to multiple pv's */
> 			        for (elem_num = 0; elem_num<cp->num_elem; elem_num++)
> 				{
> 				        fill_db_block(cp, elem_num);
> 					nchan++;
> 				}
> 			}
109a123,128
> 		printf("};\n");
> 	}
> 	else
> 	{
> 	        printf("\n/* No Database Blocks, create 1 for ptr init. */\n");
> 	        printf("static struct seqChan seqChan[1];\n");
111d129
< 	printf("};\n");
273a292,308
>         Expr *ep;
> 	int isEntry = FALSE, isExit = FALSE;
> 
> 	/* Check if there are any entry or exit "transitions" in this
> 	   state so that if so the state block will be initialized to include a
> 	   reference to the function which implements them, but otherwise just
> 	   include a null pointer in those members */
> 
> 	for ( ep = sp->left; ep != NULL; ep = ep->next )
>         {
> 	      if ( ep->type == E_ENTRY ) 
> 		     isEntry = TRUE;
> 	      else if ( ep->type == E_EXIT )
> 	             isExit = TRUE;
> 	} 
> 
> 	/* Write the source code to initialize the state block for this state */
285c320,332
< 	printf("\t/* event mask array */ EM_%s_%s},\n\n", ss_name, sp->value);
---
> 	printf("\t/* entry function */   (ENTRY_FUNC)");
> 	if ( isEntry ) 
> 		printf(" I_%s_%s,\n", ss_name, sp->value);
> 	else
> 		printf(" 0,\n");
> 
> 	printf("\t/* exit function */   (EXIT_FUNC)");
> 	if ( isExit ) 
> 		printf(" O_%s_%s,\n", ss_name, sp->value);
> 	else
> 		printf(" 0,\n");
> 
> 	printf("\t/* event mask array */ EM_%s_%s,\n", ss_name, sp->value);
286a334,336
> 	printf("\t/* state options */   ");
> 	encode_state_options(sp);
> 	printf("},\n\n");
288a339,436
> 
> /* Writes the state option bitmask into a state block. At present this f is
> extremely simple since there is only one permitted option and so there are
> no possible state option conflicts.  */
> encode_state_options(Expr *sp)
> {
>         Expr     *ep;
> 	char     errMsg[BUFSIZ], *pc = NULL, *suppl;
> 	bitMask  options = 0,
> 	         optionSpec = 0;
> 	int      duplicate = FALSE,
>                  contradictory = FALSE;  /* Currently there are no contradictions */
> 
> 	printf("(0");
> 	/* For each option character, within each OPTION statement in this state,
>            check the option character is recognized and if so code it's bit mask */
> 	for (ep = sp->right; ep != NULL; ep = ep->next )
> 	{
> 	        for (pc = (char*)ep->left; *pc != NULL; pc++)
> 		{
> 		        /* Option not to reset timers on state entry from self */
> 		        if ( *pc == 't' ) 
> 		        {
> 			       if ( optionSpec & OPT_NORESETTIMERS )
> 				     duplicate = TRUE;
>                                if ( strchr(ep->right,'+') )
> 			       {
> 				     /* No contradictions */
> 				     /* Default, no bit to code */ 
> 			       } 
> 			       else if ( strchr(ep->right,'-') ) 
> 			       {
> 				     /* No contradictions */ 
> 				     printf(" | OPT_NORESETTIMERS" );
> 				     options |= OPT_NORESETTIMERS;
> 			       }
> 			       optionSpec |=  OPT_NORESETTIMERS;
> 		        }
> 			else if ( *pc == 'e' )
> 		        {
> 			       if ( optionSpec & OPT_DOENTRYFROMSELF )
> 				     duplicate = TRUE;
> 			       if ( strchr(ep->right,'+') )
> 				     /* No contradictions */ 
> 				     /* Default, no opt bit to code */
> 				     ;		
> 			       else if ( strchr(ep->right,'-') )
> 			       {
> 				     /* No contradictions */
> 		                     printf(" | OPT_DOENTRYFROMSELF" );
> 			             options |= OPT_DOENTRYFROMSELF;
> 			       }
> 			       optionSpec |= OPT_DOENTRYFROMSELF;
> 			}
> 			else if ( *pc == 'x' )
> 		        {
> 			       if ( optionSpec & OPT_DOEXITTOSELF )
> 				     duplicate = TRUE;
> 			       if ( strchr(ep->right,'+') )
> 				     /* No contradictions */ 
> 				     /* Default, no opt bit to code */
> 				     ;		
> 			       else if ( strchr(ep->right,'-') )
> 			       {
> 				     /* No contradictions */
> 		                     printf(" | OPT_DOEXITTOSELF" );
> 			             options |= OPT_DOEXITTOSELF;
> 			       }
> 			       optionSpec |= OPT_DOEXITTOSELF;
> 			}
> 		        else
> 		        {
> 			       sprintf(errMsg,"Unrecognized option in state %s: %s%c",
> 				       sp->value, ep->right, *pc);
> 			       snc_err(errMsg);
> 			}
> 
> 			if ( duplicate )
> 			{
> 			       sprintf(errMsg,
>                                        "Option already specified in state %s: %c",
> 		       	               sp->value, *pc);
> 		               snc_err(errMsg);
> 			}
> 			if ( contradictory )
> 			{
> 			       sprintf(errMsg,
> 				       "Contradictory option or option out of order %s%c in state %s:\n\t\t %s",
>                                        ep->right,*pc,sp->value,suppl);
> 			       snc_err(errMsg);
> 			}
> 
> 		}
> 	}
> 	printf(")");
> 	return;
> } 
> 

------------------------------------------------------------------------
diff -r seq/parse.c /home/wlupton/epics/anl/modules/soft/seq/src/parse.c
22a23,24
> 29apr99,wfl	Avoided compilation warnings.
> 22sep99,grw     Supported entry and exit actions; supported state options.
26a29
> #include	<math.h>
27a31,33
> #include	<stdlib.h>
> #include	<string.h>
> 
29c35
< #include	<math.h>
---
> #include	"proto.h"	/* function prototypes */
731c737
< 	phase2(ss_list);
---
> 	phase2();
790,791c796,799
< 	if (ep1 == 0)
< 		return ep2; /* shouldn't happen */
---
> 	if (ep1 == 0 && ep2 == 0)
> 	        return NULL;
> 	else if (ep1 == 0)
> 		return ep2; 
828c836
< 	"E_?", "E_?", "E_?", "E_?", "E_?", "E_?", "E_?", "E_?", "E_?" };
---
> 	"E_ENTRY", "E_EXIT", "E_OPTION", "E_?", "E_?", "E_?", "E_?", "E_?", "E_?" };

------------------------------------------------------------------------
diff -r seq/parse.h /home/wlupton/epics/anl/modules/soft/seq/src/parse.h
13,14c13,14
< 5nov93,ajk	Changed structures var & db_chan to handle array assignments.
< 5nov93,ajk	changed malloc() to calloc() 3 places.
---
> 05nov93,ajk	Changed structures var & db_chan to handle array assignments.
> 05nov93,ajk	changed malloc() to calloc() 3 places.
17c17
< 
---
> 01sep99,grw     Added E_OPTION, E_ENTRY, E_EXIT.
18a19,28
> 
> #ifndef INCLparseh
> #define INCLparseh
> 
> /* Allow this file to be included after snc.h */
> #ifdef INCLsnch
> #undef Expr
> #undef Var
> #endif
> 
132a143,147
> #define E_ENTRY         25              /* entry statement */
> #define E_EXIT          26              /* exit statement */
> #define E_OPTION        27              /* state option statement */
> #endif	/*INCLparseh*/
> 

------------------------------------------------------------------------
diff -r seq/phase2.c /home/wlupton/epics/anl/modules/soft/seq/src/phase2.c
21a22,23
> 29apr99,wfl     Avoided compilation warnings.
> 22sep99,grw     Supported entry and exit actions.
23c25
< /*#define	DEBUG	1*/
---
> /*#define DEBUG 1*/
25a28,30
> #include	<stdlib.h>
> #include	<string.h>
> 
27a33
> #include	"proto.h"	/* function prototypes */
48a55,57
> int	db_queue_count();
> int	db_chan_count();
> 
191a201,203
> #ifdef	DEBUG
> 	fprintf(stderr, "\t \"%s\" was %s\n", ep->value, vp ? "found" : "not found" );
> #endif	/*DEBUG*/
573a586,587
>         case E_ENTRY:  /* E_ENTRY and E_EXIT only have expressions on RHS (->right) */
>         case E_EXIT:   /* but add them here incase ->left is used in future. */

------------------------------------------------------------------------
diff -r seq/seq.h /home/wlupton/epics/anl/modules/soft/seq/src/seq.h
42c42
< 		allow "unlimited" number of channels.
---
>  *		allow "unlimited" number of channels.
45,47c45,47
< 		of values returned with monitors and pvGet().
<    09aug96,wfl	Added syncQ queue support.
< 
---
>  *		of values returned with monitors and pvGet().
>  * 09aug96,wfl	Added syncQ queue support.
>  * 22sep99,grw  Supported entry and exit actions; supported state options.
123a124,125
>         ENTRY_FUNC	entryFunc;      /* ptr to entry routine for this state */
> 	EXIT_FUNC	exitFunc;       /* ptr to exit routine for this state */
124a127
>         bitMask         options;        /* options mask for this state */

------------------------------------------------------------------------
diff -r seq/seqCom.h /home/wlupton/epics/anl/modules/soft/seq/src/seqCom.h
27a28
>  * 22sep99,grw  Supported entry and exit actions; supported state options.
45a47,52
> /* Bit encoding for State Specific Options */
> #define OPT_NORESETTIMERS	(1<<0)  /* If TRUE, don't reset timers on */
> 					/* entry to state from same state */
> #define OPT_DOENTRYFROMSELF     (1<<1)  /* Do entry{} even if from same state */
> #define OPT_DOEXITTOSELF        (1<<2)  /* Do exit{} even if to same state */
> 
66a74
> typedef void    (*ENTRY_FUNC)();
99c107,109
< 	DELAY_FUNC	delayFunc;	/* delay setup routine for this state */
---
> 	DELAY_FUNC	delayFunc; 	/* delay setup routine for this state */
>         ENTRY_FUNC      entryFunc;      /* statements performed on entry to state */
> 	EXIT_FUNC       exitFunc;       /* statements performed on exit from state */
100a111
>         bitMask         options;        /* State specific option mask */ 

------------------------------------------------------------------------
diff -r seq/seq_if.c /home/wlupton/epics/anl/modules/soft/seq/src/seq_if.c
37c37
< 
---
>  * 22sep99,grw  Supported not re-starting timers on transition to curr. state.
666a667
>         long            expired = FALSE;
674c675
< 	if (timeElapsed >= pSS->delay[delayId])		
---
> 	if ( (timeElapsed >= pSS->delay[delayId]) )
677c678
< 		return TRUE;
---
> 		expired = TRUE;
679,680c680,684
< 
< 	return FALSE;
---
> #if defined(DEBUG)
> 	fprintf(stderr,"Delay %ld : %ld tics, %s\n",delayId,pSS->delay[delayId],
> 		expired ? "expired": "unexpired");
> #endif
> 	return expired;

------------------------------------------------------------------------
diff -r seq/seq_mac.c /home/wlupton/epics/anl/modules/soft/seq/src/seq_mac.c
16a17
> 29apr99,wfl     Avoided compilation warnings.
20a22
> #include	"ctype.h"

------------------------------------------------------------------------
diff -r seq/seq_main.c /home/wlupton/epics/anl/modules/soft/seq/src/seq_main.c
53c53,54
< 17may99,wfl     Moved misplaced event array initialization.
---
> 17may99,wfl	Moved misplaced event array initialization.
> 22sep99,grw     Supported entry and exit actions; supported state options.
366a368,369
> 			pState->entryFunc = (ENTRY_FUNC)pSeqState->entryFunc;
> 			pState->exitFunc = (EXIT_FUNC)pSeqState->exitFunc;
367a371
>                         pState->options = pSeqState->options;

------------------------------------------------------------------------
diff -r seq/seq_task.c /home/wlupton/epics/anl/modules/soft/seq/src/seq_task.c
13c13,14
< 	HISTORY
---
> 	HISTORY:
> 
20,23c21,25
< 21may92,ajk	In sprog_delete() wait for loggin semaphore before suspending tasks.
< 		Some minor changes in the way semaphores are deleted.
< 18feb92,ajk	Changed to allow sharing of single CA task by all state programs. 
< 		Added seqAuxTask() and removed ca_pend_event() from ss_entry().
---
> 21may92,ajk	In sprog_delete() wait for logging semaphore before suspending
> 		tasks. Some minor changes in the way semaphores are deleted.
> 18feb92,ajk	Changed to allow sharing of single CA task by all state
> 		programs. Added seqAuxTask() and removed ca_pend_event() from
> 		ss_entry().
26c28,29
< 24nov93,ajk	Changed implementation of event bits to support unlimited channels
---
> 24nov93,ajk	Changed implementation of event bits to support unlimited
> 		channels.
28c31,32
< 19oct95,ajk/rmw Fixed bug which kept events from being cleared in old eventflag mode
---
> 19oct95,ajk/rmw Fixed bug which kept events from being cleared in old eventflag
> 		mode.
30c34,35
< ?????96,joh Fixed problem with delay calculations.
---
> ?????96,joh 	Fixed problem with delay calculations.
> 22sep99,grw     Supported entry and exit actions; supported state options.
48c53
< LOCAL	VOID seq_clearDelay(SSCB *);
---
> LOCAL	VOID seq_clearDelay(SSCB *, STATE*);
136a142,143
> 	pSS->nextState = -1;
> 	pSS->prevState = -1;
153c160,167
< 		seq_clearDelay(pSS); /* Clear delay list */
---
> 		/* If we've changed state so do any entry actions. Also do these 
>                  * even if its the same state if option to do so is enabled. 
>                  */
> 		if ( pSS->prevState != pSS->currentState ||
>                      pST->options & OPT_DOENTRYFROMSELF )
> 	  	         if ( pST->entryFunc ) pST->entryFunc( ssId, pVar );
> 
> 		seq_clearDelay(pSS, pST); /* Clear delay list */
157c171,172
< 		 * executed at least once when a state is first entered. */
---
> 		 * executed at least once when a state is first entered. 
>                  */
181c196
< 			    register	int i;
---
> 			        register	int i;
183,185c198,200
< 			    for (i = 0; i < nWords; i++)
< 					pSP->pEvents[i] = pSP->pEvents[i] & !pSS->pMask[i];
< 				
---
> 			        for (i = 0; i < nWords; i++)
> 				         pSP->pEvents[i] = 
>                                          pSP->pEvents[i] & !pSS->pMask[i];
192d206
< 
204a219,223
> 		/* If changing state, do any exit actions. */
> 		if ( pSS->currentState != pSS->nextState ||
>                      pST->options & OPT_DOEXITTOSELF )
> 		         if ( pST->exitFunc ) pST->exitFunc( ssId, pVar );
> 
256c275
< LOCAL VOID seq_clearDelay(pSS)
---
> LOCAL VOID seq_clearDelay(pSS,pST)
257a277
> STATE           *pST;
261c281,289
< 	pSS->timeEntered = tickGet(); /* record time we entered this state */
---
> 
>         /* On state change set time we entered this state; or if transition from
>          * same state if option to do so is on for this state. 
>          */
> 	if ( (pSS->currentState != pSS->prevState) ||
>              !(pST->options & OPT_NORESETTIMERS) )
> 	{
> 	        pSS->timeEntered = tickGet();  
> 	}
266c294
< 		pSS->delayExpired[ndelay] = FALSE;
---
> 	 	pSS->delayExpired[ndelay] = FALSE;

------------------------------------------------------------------------
diff -r seq/snc.y /home/wlupton/epics/anl/modules/soft/seq/src/snc.y
20a21
> 22sep99,grw     Supported entry and exit actions; supported state options.
63c64
< %token	<pchar>	STATE STATE_SET
---
> %token	<pchar>	STATE ENTRY STATE_SET
67c68
< %token	PROGRAM EXIT OPTION
---
> %token	PROGRAM EXIT L_OPTION
78c79
< %token	L_SHIFT R_SHIFT COMPLEMENT MODULO
---
> %token	L_SHIFT R_SHIFT COMPLEMENT MODULO OPTION
90a92,95
> %type   <pexpr> state_option_list, state_option
> %type   <pexpr> condition_list
> %type   <pexpr> entry_list, exit_list, entry, exit
> 
196a202
> |       error { snc_err("type specifier"); }
242c248
< |	error { snc_err("state set"); }
---
> |	error { snc_err("state list"); }
246,247c252,253
< :	STATE NAME L_BRACKET transition_list R_BRACKET
< 				{ $$ = expression(E_STATE, $2, $4, 0); }
---
> : 	STATE NAME L_BRACKET state_option_list condition_list R_BRACKET
> 			{ $$ = expression(E_STATE, $2, $5, $4); }
251a258,302
> state_option_list /* A list of options for a single state */
> :       /* Optional */                  { $$ = NULL; }
> |	state_option			{ $$ = $1; }
> |	state_option_list state_option	{ $$ = link_expr($1, $2); }
> |	error				{ snc_err("state option list"); }
> ;
> 
> state_option /* An option for a state */
> :	OPTION PLUS NAME SEMI_COLON	
>                 { $$ = expression(E_OPTION,"stateoption",$3,"+"); }
> |	OPTION MINUS NAME SEMI_COLON	
> 		{ $$ = expression(E_OPTION,"stateoption",$3,"-"); }
> |       error	{ snc_err("state option specifier"); }
> ;
> 
> condition_list /* Conditions and resulting actions */
> :	entry_list transition_list exit_list	
> 				{ $$ = link_expr( link_expr($1,$2), $3 ); }
> |	error			{ snc_err("state condition list"); }
> ;
> 
> entry_list
> :	/* optional */		{ $$ = NULL; }
> |	entry			{ $$ = $1; }
> |	entry_list entry	{ $$ = link_expr( $1, $2 ); }
> ;
> 
> exit_list
> :	/* optional */		{ $$ = NULL; }
> |	exit			{ $$ = $1; }
> |	exit_list exit 	        { $$ = link_expr( $1, $2 ); }
> ;
> 
> entry	/* On entry to a state, do this */
> :	ENTRY L_BRACKET stmt_list R_BRACKET
> 			        { $$ = expression( E_ENTRY, "entry", 0, $3 ); } 
> |	error		        { snc_err("entry block"); }
> ;
> 
> exit	/* On exit from a state, do this */
> :	EXIT L_BRACKET stmt_list R_BRACKET
> 			        { $$ = expression( E_EXIT, "exit", 0, $3 ); } 
> |	error	 	        { snc_err("exit block"); }
> ;
> 
255c306
< |	error { snc_err("transition"); }
---
> |	error                           { snc_err("when transition list"); }
258c309
< transition	/* define a transition ("when" statment ) */
---
> transition /* define a transition condition and action */
260c311
< 			{ $$ = expression(E_WHEN, $9, $3, $6); }
---
> 			                { $$ = expression(E_WHEN, $9, $3, $6); }
261a313
> |       error                           { snc_err("when transition block"); }
361c413
< |	error 				{ snc_err("action statement"); }
---
> /* |	error 				{ snc_err("action statement"); } */

------------------------------------------------------------------------
diff -r seq/snc_lex.l /home/wlupton/epics/anl/modules/soft/seq/src/snc_lex.l
27a28
> 22sep99,grw     Supported ENTRY token (for entry action).
183a185
> <SNL>"entry"    RETURN(ENTRY);

------------------------------------------------------------------------
diff -r seq/snc_main.c /home/wlupton/epics/anl/modules/soft/seq/src/snc_main.c
23a24
> 29apr99,wfl	Avoided compilation warnings.
27a29,32
> #include	<stdlib.h>
> #include	<string.h>
> 
> #include	"proto.h"
79c84
< 	FILE	*infp, *outfp, *freopen();
---
> 	FILE	*infp, *outfp;

