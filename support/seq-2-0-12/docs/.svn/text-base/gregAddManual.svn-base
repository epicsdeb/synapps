William, this note is arranged in sections corresponding those of the State
Notation Language and Sequencer Users Guide you sent me. Feel free to change
anything you feel isn't clear, or to add to this. Also I don't know which 
version you want to release my stuff in, so I haven't been specific
about which version my stuff refers to.


SECTION 1
p4,	New Language Features
		Added entry and exit blocks. The entry {...} block of a state is
		executed each time the state is entered; an exit {...} block is
		executed each time
                the state is left.

                Added state options. t,e,x are now recognized options
		within the scope of a state. -t inhibits the "timer reset" on
		re-entry to a state from itself; -e (for "entry") is used with the
		new entry{} block, and forces the entry{} statements to be executed
		on all entries to a state, even if from the same state; -x (for
		"exit") is complimentary to -e, but for the new exit{} block.


SECTION 5 STATE NOTATION LANGUAGE SYNTAX

p25 	Structure of a State Set

<William, here we get a little complicated because "option", and the entry and exit
statements are optional; in fact they may occure 0, 1 or more times, so describing
the allowable syntax exactly in an intuitively easy way is problematical. 
I've used a chopped "+0, +1" formalism here. In case you're not familiar with 
it +0 means "the preceding may occur zero, one, or more times", +1 means "may 
occur one or more times". The +0 and +1 should be in subscript but since
this is ASCII I can't write that. Its descriptively powerful, but clumsy and 
difficult to read if you haven't seen it before, so of course feel free to 
use whatever formalism you think is clear in the document.>

For 
State_def is defined as:
	 state state_name { event_action . . . }
Read
State_def is defined as:
	 state state_name { options+0 event_actions }
	
Insert
[options] is defined as:
	option [-|+] [t|e|x]+1 ;

For
Event_action is defined as:
	when (expression) { statement . . . } state new-state
Read
Event_actions is defined as:
	[ entry { statement } ]+0 
	when (expression) { statement+0 } state new-state
	[ exit { statement } ]+0

Any "entry" blocks are executed when the state is entered. Exit blocks are
executed when the state if left, see the options -e and -x below for more details
about controlling this behaviour. Note that the statements in all entry blocks
of a state are executed before any of the expressions in "when ()" conditions are 
evaluated. 

<p26    Add section "State Options">
State Options
	Some options may be specified for a state using the option keyword. 
Currently there are three allowable options, t, e and x. The option string
must be preceded by a + or -, for instance "option -te".

	-t	Don't reset the time specifying when the state was entered if
                coming from the same state. When this
                option is used the delay() built-in function will
                return whether the given time delay has elapsed from the moment the
                current state was entered from a different state, rather than from
                when it was entered for the current iteration.
        -e      Do "entry { . . . }" blocks even if the previous state was the same
                as the current state.
        -x      Do "exit { . . . }" blocks even if the next state is the same as
                the current state.  

+t, +e and +x are also permitted, though + is interpreted as "do the default
behaviour for this option". For instance "option +tx" would have the same 
effect as if no option specification were given for t and x, so its use is
only documentary. Note that more than one option line is allowed, and that 
syntax must be used to specify both + and - options, for instance:

	state low 
	{
		option -e;  /* Do entry{} every time ... */
		option +x;  /* but only do exit{} when really leaving */
		entry { ...

 
<p26	Add, possibly after para "Examples of statements in SNL"  >
An example of a State definiton in SNL:

       state low
        {
            option -te; 
            entry
            {
                printf("Will do this on each entry");
            }
            when(v>5.0)
            {
                printf("now changing to high\n");
            } state high
            when(delay(.1))
            {
                /* Pause of .1 on every iteration */
            } state low
        }



p30 Exit Procedure
Add
This procedure should not be confused with the exit block of a state, which has
the same syntax, but is executed at each transition from a state to the next state. 

SECTION 6 EXAMPLES OF STATE PROGRAMS

<Maybe we should include a state program from the /seq or /seq/test 
subdirectories I sent you? >


