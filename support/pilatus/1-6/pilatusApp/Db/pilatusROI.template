# Database for Pilatus detector with ROI calculations
# Mark Rivers
# July 5, 2007

# Acquire mode
record(mbbo,"$(DET)AcquireMode") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"Ext. Enable")
    field(TWVL,"2")
    field(TWST,"Ext. Trigger")
    field(THVL,"3")
    field(THST,"Mult. Trigger")
    field(FRVL,"4")
    field(FRST,"Alignment")
}

# Start an exposure
record(busy, "$(DET)Acquire")
{
}

# Abort an exposure
record(bo, "$(DET)Abort")
{
}

# Armed flag, which indicates Pilatus is ready for external triggers
record(bo, "$(DET)Armed")
{
   field(ZNAM, "Unarmed")
   field(ONAM, "Armed")
}

record(ao, "$(DET)ExposureTime")
{
    field(PINI, "1")
    field(VAL,  "1.0")
    field(DESC, "Exposure time set")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol exptime.set $(PORT)")
    field(EGU,  "s")
    field(PREC, "6")
}

# Number of images
record(longout, "$(DET)NImages")
{
    field(PINI, "1")
    field(DESC, "Number of images value set")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol nimage.set $(PORT)")
    field(VAL,  "1")
}

# Exposure period
record (ao, "$(DET)ExposurePeriod")
{
    field(PINI, "1")
    field(DESC, "Exposure Period set")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol expper.set $(PORT)")
    field(EGU,  "s")
    field(PREC, "6")
}

# Number of exposures per image
record (longout, "$(DET)NExposures")
{
    field(PINI, "1")
    field(DESC, "No. of Exposures per frame")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol nexpfrm.set $(PORT)")
}

# Delay time in External Trigger mode.
record (ao, "$(DET)DelayTime")
{
    field(PINI, "1")
    field(DESC, "Exposure Delay")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol delay.set $(PORT)")
    field(EGU,  "s")
    field(PREC, "6")
}

# ROI related records

record(bo, "$(DET)ClearROIs")
{
}

# Image related records

# Image posting flag
record(bo, "$(DET)PostImages")
{
   field(VAL, "1")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bo, "$(DET)HighlightROIs")
{
   field(VAL, "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(longout, "$(DET)NXPixels")
{
    field(VAL, "$(NXPIXELS)")
}

record(longout, "$(DET)NYPixels")
{
    field(VAL, "$(NYPIXELS)")
}

record(waveform, "$(DET)ImageData")
{
    field(FTVL, "LONG")
    field(NELM, "$(NPIXELS)")
}


# File related records

# File path.
record(waveform, "$(DET)FilePath")
{
    field(PINI,  "1")
    field(DTYP, "stream")
    field(INP,  "@pilatusROI.protocol imgpath.set $(PORT)")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Filename
record(stringout, "$(DET)Filename")
{
    field(VAL,  "test")
}

# Full filename, including path
record(waveform, "$(DET)FullFilename")
{
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Format string for formatting file name
record(stringout, "$(DET)FileFormat")
{
   field(VAL, "%s%s%4.4d.tif")
}

# Next file number
record(longout, "$(DET)FileNumber")
{
   field(VAL, "1")
}

# Autoincrement flag
record(bo, "$(DET)AutoIncrement")
{
   field(VAL, "1")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

# Bad pixel mapping file
record(waveform, "$(DET)BadPixelFile")
{
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Number of bad pixels
record(longout, "$(DET)NBadPixels")
{
}

# Flat field file
record(waveform, "$(DET)FlatFieldFile")
{
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Flat field valid flag.
record(bo, "$(DET)FlatFieldValid")
{
   field(DESC, "Flat field valid")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

# Minimum flat field value
record(ao, "$(DET)MinFlatField")
{
   field(VAL, "100")
}

# Threshhold and gain related fields
# Threshold energy
record(ao, "$(DET)ThresholdEnergy")
{
   field(DESC, "Energy threshold")
   field(EGU,  "eV")
   field(PREC, "0")
   field(VAL, "10000")
}

# Gain
record(mbbo, "$(DET)Gain")
{
   field(DESC, "Shaping time and gain")
   field(ZRST, "Fast/Low")
   field(ZRVL, "0")
   field(ONST, "Medium/Medium")
   field(ONVL, "1")
   field(TWST, "Slow/High")
   field(TWVL, "2")
   field(THST, "Slow/Ultrahigh")
   field(THVL, "3")
   field(VAL,  "1")
}

# Timeout waiting for TIFF file.
record(ao, "$(DET)ReadTiffTimeout")
{
   field(DESC, "Timeout for TIFF file")
   field(VAL,  "30")
   field(EGU,  "s")
   field(PREC, "3")
}

# Minimum time between updates for waveform records
record(ao, "$(DET)MinWFUpdateTime")
{
   field(VAL,  "0.2")
   field(EGU,  "s")
   field(PREC, "3")
}

# Minimum time between updates for image waveform record
record(ao, "$(DET)MinImageUpdateTime")
{
   field(VAL,  "1.0")
   field(EGU,  "s")
   field(PREC, "3")
}

# Record to status messages
record(stringout, "$(DET)StatusMessage")
{
}


# Record to display messages sent to camserver
record(waveform, "$(DET)SendMessage")
{
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Record to display messages received from camserver
record(waveform, "$(DET)ReplyMessage")
{
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

# Disconnect from camserver
record (bo, "$(DET)Disconnect")
{
    field(DESC, "Disconnect from camserver")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol disconnect $(PORT)")
}

# Connect to camserver
record (bo, "$(DET)Connect")
{
    field(DESC, "Connect to camserver")
    field(DTYP, "stream")
    field(OUT,  "@pilatusROI.protocol connect $(PORT)")
}

