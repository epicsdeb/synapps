SETTING UP THE REMOTE MODE OF DATA COLLECTION BY MARCCD
-------------------------------------------------------

Using: marccd ver. 0.6.6 and higher

Authors: Michael Blum, Ross Doyle

Last modified: 12/9/2002


Introduction
------------
It is possible to collect data by marccd under the control of another program.
We call this the "Remote mode" of data collection. An institution might prefer
to use this mode if they have developed a user interface that can control many
kinds of equipment. Several institutions are currently using this method 
successfully, including ESRF.


Compiling the sample programs
-----------------------------
Along with these instructions you should obtain a tar file called
example_remote_server.tgz (generally found in ~marccd/contrib/ but if your
release of marccd is older than 0.6.6, you may request a newer file provided 
from Mar USA). If you have not already done so, unzip and untar the file in
a new directory by typing "tar -zxvf example_remote_server.tgz". 

Included in the untarred files will be:
dsmar_utils.c
dsmar_utils.h
Makefile
Makefile.bak
marccd.c
marccd_client_socket.c
marccd_server_pipe.c
marccd_server_socket.c
remote_mode.txt
socket_utils.c
socket_utils.h

Compile marccd_client_socket.c and marccd_server_socket.c by typing "make 
marccd_client_socket" and "make marccd_server_socket". The file 
marccd_server_pipe.c is also provided as a sample to show how a connection can
be made with marccd using pipes, but in the example that follows, the programs
with socket connections are used.


The Remote mode dialog box and the server program
-------------------------------------------------
To put the program marccd into remote mode, select Remote control from the
Acquire menu. A dialog box should come up with four fields. These four fields
have customizable label names and values that are sourced from the file
~marccd/configuration/marccd_server.conf. By default, the field labels are:

1. "Server Environment:" This field can be left blank. (If an environment 
variable is required by the control program, it can be inserted here. Some 
configuration of marccd may be required by Mar USA to use this.)

2. "Server Command:"  Enter marccd_server_socket or click "Browse" to 
browse for the desired server program. 

3. "Server Arguments:" Enter the port number to be opened by the server. It 
should match that looked for by the client. The sample client program provided
uses port number 2002, so enter 2002.

4. "Server Log:" This can be left blank. It is not yet fully implemented at
this time.

(Earlier versions of marccd probably have a different name for each of these
fields, but they should operate similarly.) The configuration file, 
~marccd/configuration/marccd_server.conf, is called by the site configuration
file, ~marccd/configuration/marccd_site.

When the user clicks "Start" in the Remote control dialog box, marccd will
execute the specified server program as a child process. The server is
responsible for translating commands and responses between the controlling
program and marccd.

At the ESRF the server program is MarCCDds. MarCCDds advertises itself to the
ESRF device server database system and accepts commands from that system. It
interprets those commands and passes commands to marccd that marccd can 
understand. MarCCDds is available in the ~marccd/contrib/ directory.

Alternatively, marccd can be started directly into the remote mode by using
the -r command line option. The values specified in the configuration file
~/marccd/configuration/marccd_server.conf are automatically used. 


The client program
------------------
Now look at the sample client program marccd_client_socket. It functions like
a telnet session to the socket program, into which text commands (described in
the next section) may be entered to drive marccd. Users will need to 
incorporate this or a similar client into the controlling program they wish to
use.

Type ./marccd_client_socket to start the program. The user may try typing in
the commands below (such as get_state, or get_bin, etc.) in order to verify
that indeed the marccd program is executing these commands.


Commands used by marccd
-----------------------
marccd understands the following commands.

get_size

   marccd will answer with the fast (x) and slow (y) dimensions of the
   data frame.

get_bin
   marccd will answer with the fast (x) and slow (y) binning of the
   data frame.

set_bin,x,y
   marccd will set the fast (x) and slow (y) binning of the data frame.

start
   marccd will start integrating data (stop clearing) on the CCD.

readout,flag
   marccd will stop integrating and start reading the CCD
   flag:   0 read data into raw data frame storage
           1 read data into raw data frame storage AND copy that data to 
             background frame storage
           2 read data into raw data frame storage AND copy that data to
             system scratch storage

dezinger,flag
   marccd will calculated a "dezingered" frame from two stored frames
   One of the source frames is the System Scratch frame.
   The second source frame and the destination are specified with the flag.
   flag:   0 use and store into the latest data frame.
           1 use and store into the current background frame
           2 read and store into into system scratch storage

correct
   marccd will apply geometric and flatfield corrections to the raw
   data frame.

writefile,filename,flag
   marccd will write out a data frame to a file on disk.
   filename: The name of the file to be written.
   flag:     0  write raw file.
             1  write corrected file.

abort
   marccd will abort the current operation.  Normally this would be done
   to stop integration and return the CCD to continuous clear mode.

header,header_data\n
   marccd will accept header_data and interpret item=value pairs to be
   placed into the data frame header.  header_data consists of a list
   of item=value pairs separated by commas and terminated by a newline
   (\n).  The following items are understood:

   	detector_distance	float 	(mm)
   	beam_x			float 	(mm)
   	beam_y			float 	(mm)
	exposure_time		float 	(sec)
	start_phi		float 	(deg)
	rotation_axis 		string	(omega,chi,kappa,phi,gamma,delta,
	                                 or xtal_to_detector)
	rotation_range		float	(deg)
	source_wavelength	float	(angstroms)
	file_comments		string
	dataset_comments	string

get_state
   marccd will answer with the current state of the system. The possible
   states are: 
      IDLE		0
      ACQUIRE		1
      READOUT		2
      CORRECT		3
      WRITING		4
      ABORTING		5
      UNAVAILABLE	6
      ERROR		7
      BUSY		8

set_state,state
   marccd will set the state to the desired state.  This is for testing
   purposes only and has no use in a normally functioning system.

shutter,flag
   marccd will set the shutter state to either closed or open. (Only if 
   marccd controls the shutter!) If the mardtb is used, this function
   controls the mardtb shutter. Otherwise, it controls the shutter attached
   to the shutter input on the marccd controller unit.
   flag:     0  closed
             1  open

*************************************
CURRENTLY NOT SUPPORTED 
phi,move_flag,absolute_flag,angle
   marccd will move the phi axis (Only if marccd controls the phi axis!)
*************************************

*************************************
CURRENTLY NOT SUPPORTED 
distance,move_flag,absolute_flag,angle
   marccd will move the detector distance (Only if marccd controls the
   detector distance!)
*************************************

end_automation
   marccd will exit remote mode.

Note
----
In addtion to the above commands, it is recommeded that any server
application implement the following commands.

get_state - same as above, but queries from the client should be answered
            directly by the server without querying marccd.

get_size - same as above, but queries from the client should be answered
           directly by the server without querying marccd.

get_bin - same as above, but queries from the client should be answered
          directly by the server without querying marccd.

get_state_hist (Implemented completely in the server)
        Will answer with the current state and the most recent previous
        state separated by commas. (see get_state)


Some sample data collection command routines
--------------------------------------------

The following are possible sequences of commands that you may implement in 
your remote mode control of marccd. We assume here that your facility has 
implemented its own shutter control.

To collect a background image:

[CLOSE SHUTTER]
start                    (start integration)
[WAIT DESIRED TIME]
readout,1                (read data into both raw and background buffers)

Either a "bias" frame (a background with zero integration time) or a non-zero
time "dark" frame must always be collected to be subtracted from the data.
Because the marccd instrument has extremely low dark current, taking the time
to collect a dark frame (as opposed to a bias frame) is usually not necessary,
even for very long x-ray exposure times of data.

The bias doesn't have to be retaken for every data image taken, but generally 
should be retaken at the start of every new data set, and also about once
every half hour (depending on the thermal stability of the hutch). If a
mismatch in the level of the 4 quadrants of data frames is noticed, the bias
is probably drifting and should be recollected (and maybe should be set to be
collected more often).

To collect a data image:

start                    (start integration)
[OPEN SHUTTER]
[WAIT DESIRED TIME]
[CLOSE SHUTTER]
readout,0                (read data into raw frame buffer)
correct                  (apply correction; data sent to "corrected" buffer)
writefile,IMAGE,1        (write data from corrected frame buffer to file)

Note that in normal operation, neither the background frame nor the raw
(uncorrected) data frame need to be saved.

